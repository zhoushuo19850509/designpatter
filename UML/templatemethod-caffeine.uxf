<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>380</x>
      <y>540</y>
      <w>260</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>/CaffeineBeverage/
--
/brew()/
/addCondiments()/
--
prepareRecipe()
boilWater()
pourInCup()
keepWarm()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>200</x>
      <y>770</y>
      <w>140</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Coffee
--
brew()
addCondiments()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>260</x>
      <y>660</y>
      <w>230</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>210.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>440</x>
      <y>770</y>
      <w>140</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Tea
--
brew()
addCondiments()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>490</x>
      <y>660</y>
      <w>50</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;30.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>70</x>
      <y>210</y>
      <w>580</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>这个UML是为了说明TemplateMethod设计模式的一个场景:CaffeineBeverage

CaffeineBeverage中定义一个template method:prepareRecipe()
这个模板方法调用
1.若干抽象方法:
brew()/addCondiments()
这些抽象方法由具体的子类(Coffee/Tea)去实现.
2.若干实际方法:
boilWater()/pourInCup()
这些具体方法定义在抽象类CaffeineBeverage内部

这么做的好处是,template method(prepareRecipe())
可以专注于算法的实现:通过各个步骤准备饮料.
而不用关心具体的子类是是啥.
template method中,一部分是各子类实现逻辑都一样的通用方法,那就定义在抽象类中;
一部分是各子类个性化的实现逻辑,由子类自己去实现.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>750</x>
      <y>600</y>
      <w>160</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>boilWater()
/brew()/
/addCondiments()/
pourInCup()
keepWarm()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>470</x>
      <y>610</y>
      <w>300</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;10.0;280.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>670</x>
      <y>770</y>
      <w>140</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Tang
bg=red
--
brew()
addCondiments()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>560</x>
      <y>660</y>
      <w>210</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;190.0;110.0</additional_attributes>
  </element>
</diagram>
